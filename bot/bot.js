// bot/bot.js ‚Äî —á–∏—Å—Ç–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤)
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: $1000, –†–µ—Ñ–µ—Ä–∞–ª: +$500, –ü–æ–¥–ø–∏—Å–∫–∞: +$5000 (—Ä–∞–∑–æ–≤–æ), –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: +$1000/–¥–µ–Ω—å

import 'dotenv/config';
import express from 'express';
import { Telegraf, Markup } from 'telegraf';
import pg from 'pg';

const { BOT_TOKEN, WEBAPP_URL, DATABASE_URL, PORT = 8081 } = process.env;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN missing');
if (!WEBAPP_URL) throw new Error('WEBAPP_URL missing');
if (!DATABASE_URL) throw new Error('DATABASE_URL missing');

// –ë–æ—Ç—É –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞ (–ª—É—á—à–µ ‚Äî –∞–¥–º–∏–Ω)
const CHANNEL = '@erc20coin';

// —Å—É–º–º—ã (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
const AMOUNTS = {
  REGISTER: 1000,
  REFERRAL: 500,    // —Ä–µ—Ñ–µ—Ä–µ—Ä—É
  SUBSCRIBE: 5000,  // —Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
  DAILY: 1000,      // –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
};

const pool = new pg.Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

// --- –º—è–≥–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ)
await pool.query(`
  CREATE TABLE IF NOT EXISTS users(
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE NOT NULL,
    username TEXT,
    balance BIGINT NOT NULL DEFAULT ${AMOUNTS.REGISTER},
    channel_bonus_claimed BOOLEAN NOT NULL DEFAULT FALSE,
    last_daily_bonus DATE,
    created_at TIMESTAMPTZ DEFAULT now()
  );

  CREATE TABLE IF NOT EXISTS referrals(
    id SERIAL PRIMARY KEY,
    referrer_user_id INT REFERENCES users(id),
    referred_telegram_id BIGINT UNIQUE,
    created_at TIMESTAMPTZ DEFAULT now()
  );
`);
await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS channel_bonus_claimed BOOLEAN NOT NULL DEFAULT FALSE;`);
await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS last_daily_bonus DATE;`);
await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS username TEXT;`);

const bot = new Telegraf(BOT_TOKEN);

// –ø–æ–ª—É—á–∏–º username –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ-—Å—Å—ã–ª–æ–∫
let BOT_USERNAME = 'realpricebtc_bot';
try { BOT_USERNAME = (await bot.telegram.getMe()).username; } catch { /* no-op */ }

// ===== –£—Ç–∏–ª–∏—Ç—ã
async function ensureUser(telegramId, username) {
  await pool.query(
    `INSERT INTO users(telegram_id, username, balance)
     VALUES ($1, $2, $3)
     ON CONFLICT (telegram_id) DO NOTHING`,
    [telegramId, username || null, AMOUNTS.REGISTER]
  );
  if (username) {
    await pool.query(
      `UPDATE users SET username=$2
       WHERE telegram_id=$1 AND (username IS NULL OR username='')`,
      [telegramId, username]
    );
  }
  const r = await pool.query(
    'SELECT id, balance, username, channel_bonus_claimed, last_daily_bonus FROM users WHERE telegram_id=$1',
    [telegramId]
  );
  return r.rows[0];
}

async function grantReferral(referrerTgId, referredTgId) {
  if (String(referrerTgId) === String(referredTgId)) return;

  // –Ω–∞–π–¥—ë–º/—Å–æ–∑–¥–∞–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  let refUserId;
  const r1 = await pool.query('SELECT id FROM users WHERE telegram_id=$1', [referrerTgId]);
  if (r1.rowCount === 0) {
    const ins = await pool.query(
      'INSERT INTO users(telegram_id, balance) VALUES($1, $2) RETURNING id',
      [referrerTgId, AMOUNTS.REGISTER]
    );
    refUserId = ins.rows[0].id;
  } else {
    refUserId = r1.rows[0].id;
  }

  // –∑–∞—á–µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ
  const exists = await pool.query('SELECT 1 FROM referrals WHERE referred_telegram_id=$1', [referredTgId]);
  if (exists.rowCount === 0) {
    await pool.query(
      'INSERT INTO referrals(referrer_user_id, referred_telegram_id) VALUES($1,$2)',
      [refUserId, referredTgId]
    );
    await pool.query('UPDATE users SET balance=balance+$1 WHERE id=$2', [AMOUNTS.REFERRAL, refUserId]);
    try {
      await bot.telegram.sendMessage(
        referrerTgId,
        `üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥! –ù–∞—á–∏—Å–ª–µ–Ω–æ +$${AMOUNTS.REFERRAL}.`
      );
    } catch {}
  }
}

function todayUTC() {
  const d = new Date();
  return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()));
}

async function grantDailyIfNeeded(telegramId) {
  const r = await pool.query('SELECT last_daily_bonus FROM users WHERE telegram_id=$1', [telegramId]);
  const last = r.rows[0]?.last_daily_bonus ? new Date(r.rows[0].last_daily_bonus) : null;
  const today = todayUTC();
  const isSameDay =
    last &&
    last.getUTCFullYear() === today.getUTCFullYear() &&
    last.getUTCMonth() === today.getUTCMonth() &&
    last.getUTCDate() === today.getUTCDate();

  if (!isSameDay) {
    await pool.query(
      'UPDATE users SET balance=balance+$1, last_daily_bonus=$2 WHERE telegram_id=$3',
      [AMOUNTS.DAILY, today.toISOString().slice(0, 10), telegramId]
    );
    return true;
  }
  return false;
}

async function checkAndGrantChannelBonus(ctx) {
  const uid = ctx.from.id;
  const uname = ctx.from.username ? '@' + ctx.from.username : null;
  const user = await ensureUser(uid, uname);

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  let isMember = false;
  try {
    const m = await ctx.telegram.getChatMember(CHANNEL, uid);
    isMember = m && m.status && m.status !== 'left';
  } catch (err) {
    console.error('getChatMember error:', err.description || err.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –î–∞–π –±–æ—Ç—É –ø—Ä–∞–≤–æ –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
    return;
  }

  if (!isMember) {
    await ctx.reply(`–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${CHANNEL}, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.`);
    return;
  }

  // —Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–Ω–∞–ª
  if (!user.channel_bonus_claimed) {
    await pool.query(
      'UPDATE users SET balance=balance+$1, channel_bonus_claimed=TRUE WHERE telegram_id=$2',
      [AMOUNTS.SUBSCRIBE, uid]
    );
    await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–æ–Ω—É—Å $${AMOUNTS.SUBSCRIBE} –Ω–∞—á–∏—Å–ª—ë–Ω.`);
  } else {
    await ctx.reply('–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ ‚úÖ');
  }

  // –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—á—Ç–æ–±—ã ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª –æ–±–Ω–æ–≤–ª—è–ª–∞ –≤—Å—ë —Å—Ä–∞–∑—É)
  const dailyGiven = await grantDailyIfNeeded(uid);
  if (dailyGiven) await ctx.reply(`üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å +$${AMOUNTS.DAILY} –Ω–∞—á–∏—Å–ª—ë–Ω.`);

  // –±–∞–ª–∞–Ω—Å
  const r2 = await pool.query('SELECT balance FROM users WHERE telegram_id=$1', [uid]);
  const bal = r2.rows[0]?.balance ?? 0;
  await ctx.reply(`–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: $${Number(bal).toLocaleString()}`);
}

function mainMenu(urlWithUid) {
  // –±–µ–∑ ¬´–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª ‚Äî –µ–≥–æ –≤–µ–¥—ë–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
  return Markup.keyboard([
    [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å BTC Game', urlWithUid)],
    [{ text: '–†–µ—Ñ–µ—Ä–∞–ª—ã' }, { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' }],
  ]).resize();
}

// ===== /start
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: /start <refId>, /start check
bot.start(async (ctx) => {
  const uid = ctx.from.id;
  const uname = ctx.from.username ? '@' + ctx.from.username : null;
  await ensureUser(uid, uname);

  const payload = ctx.startPayload; // '123456', 'check', ...
  if (payload && /^\d+$/.test(payload)) {
    await grantReferral(payload, uid);
  } else if (payload && payload === 'check') {
    // deep-link –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª
    await checkAndGrantChannelBonus(ctx);
    return;
  }

  // –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ
  const dailyGiven = await grantDailyIfNeeded(uid);

  const url = WEBAPP_URL + `?uid=${uid}`;
  await ctx.reply(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ $${AMOUNTS.REGISTER} –Ω–∞ —Å—Ç–∞—Ä—Ç.\n` +
      (dailyGiven ? `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å +$${AMOUNTS.DAILY} —É–∂–µ –Ω–∞—á–∏—Å–ª—ë–Ω —Å–µ–≥–æ–¥–Ω—è.\n` : '') +
      `–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL} ‚Äî +$${AMOUNTS.SUBSCRIBE} (—Ä–∞–∑–æ–≤–æ).\n` +
      `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî +$${AMOUNTS.REFERRAL}.`,
    { ...mainMenu(url) }
  );
});

// ===== /check –∏ /bonus ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤–æ: –ø–æ–¥–ø–∏—Å–∫–∞ + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π
bot.command(['check', 'bonus'], async (ctx) => {
  await checkAndGrantChannelBonus(ctx);
});

// ===== –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.hears('–†–µ—Ñ–µ—Ä–∞–ª—ã', async (ctx) => {
  const uid = ctx.from.id;
  const link = `https://t.me/${BOT_USERNAME}?start=${uid}`;
  await ctx.reply(
    `üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n${link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî +$${AMOUNTS.REFERRAL} –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞.`
  );
});

bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', async (ctx) => {
  await checkAndGrantChannelBonus(ctx);
});

// ===== –º–∏–Ω–∏-HTTP (–µ—Å–ª–∏ –±–æ—Ç –∫–∞–∫ Web Service)
const app = express();
app.get('/', (_, res) => res.send('BTC Game Bot is running'));
app.listen(PORT, () => console.log('Bot HTTP on', PORT));

bot.launch().then(() => console.log('Bot started ‚úÖ'));
